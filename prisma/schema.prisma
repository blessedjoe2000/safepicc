generator client {
  provider   = "prisma-client-js"
  // Add this line to disable prepared statements (required for PgBouncer):
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id          String   @id @default(uuid())
  adminId     String
  title       String   @db.Text
  description String?  @db.Text
  price       Float?
  imageUrl    String?  @db.Text
  videoUrl    String?  @db.Text
  isPublished Boolean? @default(false)

  categoryId String
  category   Category   @relation(fields: [categoryId], references: [id])
  purchases  Purchase[]

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  CourseCompletion CourseCompletion[]

  @@index([categoryId])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Purchase {
  id         String   @id @default(uuid())
  customerId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  courseId   String
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([customerId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String   @id @default(uuid())
  customerId       String   @unique
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model CourseCompletion {
  id          String   @id @default(uuid())
  studentId   String
  courseId    String
  completedAt DateTime @default(now())

  course Course @relation(fields: [courseId], references: [id])

  @@unique([studentId, courseId])
}

model Appointment {
  id          String   @id @default(cuid())
  name        String
  email       String
  courseTitle String
  bookingTime DateTime
  createdAt   DateTime @default(now())
}
